<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/cache
       http://www.springframework.org/schema/cache/spring-cache.xsd">

       <context:component-scan base-package="org.example.service"/>
       <context:property-placeholder location="classpath:jdbc.properties,classpath:redis.properties"/>

       <!--<bean id="propertyPlaceholderConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">-->
              <!--<property name="locations">-->
                     <!--<list>-->
                            <!--<value>classpath:jdbc.properties</value>-->
                            <!--<value>classpath:redis.properties</value>-->
                     <!--</list>-->
              <!--</property>-->
       <!--</bean>-->

       <bean id="dataSource" class="org.apache.ibatis.datasource.pooled.PooledDataSource">
              <property name="driver" value="${jdbc.driverClassName}"/>
              <property name="url" value="${jdbc.url}"/>
              <property name="username" value="${jdbc.username}"/>
              <property name="password" value="${jdbc.password}"/>
       </bean>

       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
              <property name="dataSource" ref="dataSource"/>
              <property name="configLocation" value="classpath:mybatisConfig.xml"/>
       </bean>

       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
              <property name="basePackage" value="org.example.mapper"/>
       </bean>

       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
              <property name="dataSource" ref="dataSource"/>
       </bean>

       <tx:advice id="txAdvice" transaction-manager="transactionManager">
              <tx:attributes>
                     <tx:method name="list*" read-only="true"/>
                     <tx:method name="get*" read-only="true"/>
                     <tx:method name="*"/>
              </tx:attributes>
       </tx:advice>

       <!--通过aop命名空间的<aop:aspectj-autoproxy />声明自动为spring容器中那些配置@aspectJ切面的bean创建代理，织入切面-->
       <!--<aop:aspectj-autoproxy/>-->

       <!--高版本spring自动根据运行类选择JDK或CGLIB代理,我们无需设置proxy-target-class属性,JDK动态代理是模拟接口实现的方式,-->
       <!--cglib是模拟子类继承的方式,一般采用前者,因为前者效率高,后者不建议使用-->
       <aop:config>
              <aop:pointcut id="appService" expression="execution(* org.example.service.*.*(..))"/>
              <aop:advisor advice-ref="txAdvice" pointcut-ref="appService"/>
       </aop:config>


    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
              <property name="maxTotal" value="${redis.pool.maxTotal}"/>
              <property name="maxIdle" value="${redis.pool.maxIdle}"/>
              <property name="minIdle" value="${redis.pool.minIdle}"/>
              <property name="maxWaitMillis" value="${redis.pool.maxWaitMillis}"/>
              <property name="testOnBorrow" value="${redis.pool.testOnBorrow}"/>
              <property name="testOnReturn" value="${redis.pool.testOnReturn}"/>
       </bean>

       <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
              <property name="hostName" value="${redis.host}"/>
              <property name="port" value="${redis.port}"/>
              <property name="password" value="${redis.password}"/>
              <property name="timeout" value="${redis.timeout}"/>
              <property name="poolConfig" ref="jedisPoolConfig"/>
              <property name="usePool" value="true"/>
       </bean>

       <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
              <property name="connectionFactory" ref="jedisConnectionFactory"/>
              <property name="enableTransactionSupport" value="true"/>
              <property name="keySerializer">
                     <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
              </property>
              <property name="valueSerializer">
                     <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
              </property>
       </bean>

       <bean id="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
              <constructor-arg index="0" ref="redisTemplate"/>
              <property name="transactionAware" value="true"/>
       </bean>

        <cache:annotation-driven cache-manager="cacheManager"/>
</beans>